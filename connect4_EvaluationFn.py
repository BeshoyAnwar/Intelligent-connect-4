import numpy as np
'''
Evaluation Table is table contains numbers
    Each number indicates the number of four connected positions
For Example :
    Number 3 in the lower left most corner
    There are 3 wining states which are 
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [1. 0. 0. 0. 0. 0. 0.]          ## State 1
        [1. 0. 0. 0. 0. 0. 0.]
        [1. 0. 0. 0. 0. 0. 0.]
        [1. 0. 0. 0. 0. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]          ## State 2
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [1. 1. 1. 1. 0. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 1. 0. 0. 0.]          ## State 3
        [0. 0. 1. 0. 0. 0. 0.]
        [0. 1. 0. 0. 0. 0. 0.]
        [1. 0. 0. 0. 0. 0. 0.]
        
    Number 7 in the Middle of the board
    There are 7 wining states which are 

        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]          ## State 1
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 1. 1. 1. 1.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 1.]          ## State 2
        [0. 0. 0. 0. 0. 1. 0.]
        [0. 0. 0. 0. 1. 0. 0.]
        [0. 0. 0. 1. 0. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 1. 0. 0. 0.]          ## State 3
        [0. 0. 0. 1. 0. 0. 0.]
        [0. 0. 0. 1. 0. 0. 0.]
        [0. 0. 0. 1. 0. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [1. 0. 0. 0. 0. 0. 0.]          ## State 4
        [0. 1. 0. 0. 0. 0. 0.]
        [0. 0. 1. 0. 0. 0. 0.]
        [0. 0. 0. 1. 0. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]          ## State 5
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [1. 1. 1. 1. 0. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]          ## State 6
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 1. 1. 1. 1. 0. 0.]
        ----------------------
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]          ## State 7
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 0. 0. 0. 0. 0.]
        [0. 0. 1. 1. 1. 1. 0.]
        ----------------------
       
'''
evaluationTable = [
    [3, 4, 5, 7, 5, 4, 3],
    [4, 6, 8, 10, 8, 6, 4],
    [5, 8, 11, 13, 11, 8, 5],
    [5, 8, 11, 13, 11, 8, 5],
    [4, 6, 8, 10, 8, 6, 4],
    [3, 4, 5, 7, 5, 4, 3]
]

class Connect4:
    ...
    def evaluate(self):
        # utility value is the sum of all evaluationTable elements
        sum = 0
        if(self.turn==1):
            for i in range(6):
                for j in range(7):
                    if (self.board[i][j]== 1):
                        sum += evaluationTable[i][j]
                    elif (self.board[i][j] == 2):
                        sum -= evaluationTable[i][j]
        else:
            for i in range(6):
                for j in range(7):
                    if (self.board[i][j]== 2):
                        sum += evaluationTable[i][j]
                    elif (self.board[i][j] == 1):
                        sum -= evaluationTable[i][j]
        #print(self.turn)
        #print(self.board)
        return sum

    


